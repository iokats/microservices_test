server.port: 8080

# This is the default for the Eureka service ID or VIP
spring.application.name: gateway
app.eureka-server: localhost
eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

spring.cloud.gateway.routes:

  - id: product-composite
    uri: lb://product-composite
    predicates:
      - Path=/product-composite/**

  - id: product-composite-swagger-ui
    uri: lb://product-composite
    predicates:
      - Path=/openapi/**

  - id: eureka-api
    uri: http://${app.eureka-server}:8761
    predicates:
      - Path=/eureka/api/{segment}
    filters:
      - SetPath=/eureka/{segment}

  - id: eureka-web-start
    uri: http://${app.eureka-server}:8761
    predicates:
      - Path=/eureka/web
    filters:
      - SetPath=/

  - id: eureka-web-other
    uri: http://${app.eureka-server}:8761
    predicates:
      - Path=/eureka/**

management.endpoint.gateway.enabled: true

management.endpoint.health.enabled: true
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "health"

# We disable the RabbitMQ health indicator because we do not need it. At the gateway level, we are only interested in the
# health of each individual microservice. This way, we implicitly get information about the health of the RabbitMQ service,
# as the microservices depend on its health state.
management.health.rabbit.enabled: false

logging:
  level:
    root: INFO
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    org.springframework.cloud.gateway: TRACE

---
spring.config.activate.on-profile: docker

app.eureka-server: eureka